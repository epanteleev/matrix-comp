# JMH version: 1.21
# VM version: JDK 16-loom, OpenJDK 64-Bit Server VM, 16-loom+9-316
# VM invoker: D:\Java\jdk-16\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\lib\idea_rt.jar=62152:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: matrixbenchmark.MatrixBenchmark.coroutineMatMull

# Run progress: 0,00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 2,445 s/op
# Warmup Iteration   2: 2,431 s/op
# Warmup Iteration   3: 2,420 s/op
# Warmup Iteration   4: 2,425 s/op
# Warmup Iteration   5: 2,427 s/op
Iteration   1: 2,440 s/op
Iteration   2: 2,413 s/op
Iteration   3: 2,419 s/op
Iteration   4: 2,417 s/op
Iteration   5: 2,418 s/op

# Run progress: 10,00% complete, ETA 00:17:44
# Fork: 2 of 5
# Warmup Iteration   1: 2,444 s/op
# Warmup Iteration   2: 2,418 s/op
# Warmup Iteration   3: 2,421 s/op
# Warmup Iteration   4: 2,426 s/op
# Warmup Iteration   5: 2,421 s/op
Iteration   1: 2,422 s/op
Iteration   2: 2,416 s/op
Iteration   3: 2,421 s/op
Iteration   4: 2,425 s/op
Iteration   5: 2,422 s/op

# Run progress: 20,00% complete, ETA 00:16:05
# Fork: 3 of 5
# Warmup Iteration   1: 2,430 s/op
# Warmup Iteration   2: 2,416 s/op
# Warmup Iteration   3: 2,417 s/op
# Warmup Iteration   4: 2,418 s/op
# Warmup Iteration   5: 2,469 s/op
Iteration   1: 2,473 s/op
Iteration   2: 2,482 s/op
Iteration   3: 2,482 s/op
Iteration   4: 2,516 s/op
Iteration   5: 2,501 s/op

# Run progress: 30,00% complete, ETA 00:13:38
# Fork: 4 of 5
# Warmup Iteration   1: 2,477 s/op
# Warmup Iteration   2: 2,478 s/op
# Warmup Iteration   3: 2,478 s/op
# Warmup Iteration   4: 2,491 s/op
# Warmup Iteration   5: 2,482 s/op
Iteration   1: 2,483 s/op
Iteration   2: 2,513 s/op
Iteration   3: 2,494 s/op
Iteration   4: 2,484 s/op
Iteration   5: 2,483 s/op

# Run progress: 40,00% complete, ETA 00:11:20
# Fork: 5 of 5
# Warmup Iteration   1: 2,485 s/op
# Warmup Iteration   2: 2,479 s/op
# Warmup Iteration   3: 2,481 s/op
# Warmup Iteration   4: 2,486 s/op
# Warmup Iteration   5: 2,490 s/op
Iteration   1: 2,493 s/op
Iteration   2: 2,483 s/op
Iteration   3: 2,486 s/op
Iteration   4: 2,490 s/op
Iteration   5: 2,483 s/op


Result "matrixbenchmark.MatrixBenchmark.coroutineMatMull":
  2,462 ±(99.9%) 0,027 s/op [Average]
  (min, avg, max) = (2,413, 2,462, 2,516), stdev = 0,036
  CI (99.9%): [2,436, 2,489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 16-loom, OpenJDK 64-Bit Server VM, 16-loom+9-316
# VM invoker: D:\Java\jdk-16\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\lib\idea_rt.jar=62152:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.2.3\bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: matrixbenchmark.MatrixBenchmark.matMull

# Run progress: 50,00% complete, ETA 00:09:17
# Fork: 1 of 5
# Warmup Iteration   1: 2,500 s/op
# Warmup Iteration   2: 2,489 s/op
# Warmup Iteration   3: 2,490 s/op
# Warmup Iteration   4: 2,496 s/op
# Warmup Iteration   5: 2,537 s/op
Iteration   1: 2,494 s/op
Iteration   2: 2,502 s/op
Iteration   3: 2,509 s/op
Iteration   4: 2,509 s/op
Iteration   5: 2,505 s/op

# Run progress: 60,00% complete, ETA 00:07:20
# Fork: 2 of 5
# Warmup Iteration   1: 2,484 s/op
# Warmup Iteration   2: 2,503 s/op
# Warmup Iteration   3: 2,511 s/op
# Warmup Iteration   4: 2,491 s/op
# Warmup Iteration   5: 2,516 s/op
Iteration   1: 2,505 s/op
Iteration   2: 2,502 s/op
Iteration   3: 2,516 s/op
Iteration   4: 2,496 s/op
Iteration   5: 2,506 s/op

# Run progress: 70,00% complete, ETA 00:05:27
# Fork: 3 of 5
# Warmup Iteration   1: 2,512 s/op
# Warmup Iteration   2: 2,509 s/op
# Warmup Iteration   3: 2,495 s/op
# Warmup Iteration   4: 2,495 s/op
# Warmup Iteration   5: 2,503 s/op
Iteration   1: 2,509 s/op
Iteration   2: 2,508 s/op
Iteration   3: 2,524 s/op
Iteration   4: 2,520 s/op
Iteration   5: 2,520 s/op

# Run progress: 80,00% complete, ETA 00:03:37
# Fork: 4 of 5
# Warmup Iteration   1: 2,483 s/op
# Warmup Iteration   2: 2,494 s/op
# Warmup Iteration   3: 2,499 s/op
# Warmup Iteration   4: 2,506 s/op
# Warmup Iteration   5: 2,528 s/op
Iteration   1: 2,522 s/op
Iteration   2: 2,514 s/op
Iteration   3: 2,504 s/op
Iteration   4: 2,497 s/op
Iteration   5: 2,501 s/op

# Run progress: 90,00% complete, ETA 00:01:48
# Fork: 5 of 5
# Warmup Iteration   1: 2,474 s/op
# Warmup Iteration   2: 2,488 s/op
# Warmup Iteration   3: 2,493 s/op
# Warmup Iteration   4: 2,509 s/op
# Warmup Iteration   5: 2,504 s/op
Iteration   1: 2,501 s/op
Iteration   2: 2,514 s/op
Iteration   3: 2,513 s/op
Iteration   4: 2,496 s/op
Iteration   5: 2,509 s/op


Result "matrixbenchmark.MatrixBenchmark.matMull":
  2,508 ±(99.9%) 0,006 s/op [Average]
  (min, avg, max) = (2,494, 2,508, 2,524), stdev = 0,008
  CI (99.9%): [2,501, 2,514] (assumes normal distribution)


# Run complete. Total time: 00:17:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt  Score   Error  Units
MatrixBenchmark.coroutineMatMull  avgt   25  2,462 ± 0,027   s/op
MatrixBenchmark.matMull           avgt   25  2,508 ± 0,006   s/op

Process finished with exit code 0

